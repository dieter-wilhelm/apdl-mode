* Finding Help to APDL keywords
  Firstly with an in-buffer display of a brief command help and
  secondly browsing the complete Ansys HTML documentation.
** Command Help with Argument Counter
   Typing "M-?", the <ALT> key simultaneously with the "?" the
   question mark (for the command ‘apdl-show-command-parameters’)
   displays above the respective code line a brief description of the
   APDL command and its arguments.  This command counts also the
   number of arguments and visualises at which argument position the
   cursor is.  The command is looking for the next valid command near
   the cursor or when using a prefix argument ("C-u" or "M-4") it
   inquires an APDL command from you.  The tooltip vanishes after a
   certain time (depending on `apdl-parameter-help-duration') or it is
   switched off with an argument of zero ("M-0").

** APDL Keyword Documentation
   Browse the detailed APDL commands, elements, functions and selected
   topics in the original Ansys HTML help.

   Typing "C-c C-b" will display the original Ansys help in your web
   browser for all APDL commands, element names (stating the element
   number is sufficient), get- or parametric-functions.  "C-c C-b" is
   looking for keywords on and before the cursor or - if this fails -
   for APDL command at the line beginning.  This is also working for
   commented out code lines.

   When using a prefix argument (typing C-u before C-c C-b) the
   command inquires a keyword from you.  Keywords beginning with a
   quotation mark ‘"’ describing general manual sections, for example
   typing ‘"SHELLS"’ will call the collection of all shell elements
   from the Ansys manual.  You should complete your input with the
   <TAB> key to make it unique.

   Above quotation mark mechanism is implemented with "#" anchors for
   the Ansys help files. This mechanism is not working for locally
   installed help files on Windows systems when the default browser is
   called from Emacs.  In this case you can either use EWW as the
   default browser or specify your favourite browser directly.
 # Please see the [[../info/apdl-config.org][configuration example]] on how to do this.
#   #+texinfo:  Please see the @inforef{ on how to do this.
   Please see [[file:apdl-config.org::*Miscellaneous][Miscellaneous]] on how to do this.  Please see section
   @@texinfo:@ref{Configuration and Customisation}@@ on how to do
   this.

* Code Templates
  You are learning and also coding APDL best by example!  APDL-Mode
  provides coding examples, here called templates, for the most often
  used modelling subjects.  Moreover you are able to compile your own
  WorkBench / Discovery AIM Command templates and have them all
  immediately available in any macro file or WorkBench command object
  for inspection and inclusion.
** Model Templates
  You are able to preview the model templates with "C-c C-s" (for
  ‘apdl-display-skeleton’), while doing this, you might type <TAB> to
  complete all available skeleton names.

  Check e. g. ‘apdl-skeleton-outline-template’, type "M-x
  apdl-skeleton-outline-template <RET>" to insert this skeleton of
  APDL code with outline headings.  Alternatively you can use the
  binding "<CTRL> + u M-x apdl-skeleton-outline-template" for
  inserting templates instead of previewing them.
** WorkBench Command Object Templates
   APDL-Mode has also a small collection of code snippets for
   WorkBench command objects.  You can preview these templates with
   "C-c C-w" (for `apdl-display-wb-skeleton') or choose them from the
   menu.
* Editing Code
** Completions and Abbreviations
   APDL keyword completion (commands, elements, get- and
   parametric-functions)

   Type the first letter or letters of an APDL command, function or
   element name and use the key binding "C-M-i" to let the function
   ‘apdl-complete-symbol’ do the (case sensitive) completion for you.
   Depending on the case of your letter or letters to be completed, you
   will get a down-cased, up-cased or capitalised completion.

   There are around 2000 APDL symbols available for completion.
   Undocumented APDL commands and deprecated element types are also
   completed.  The former are identified as such with a different
   highlighting and in their ’command syntax help’.  Please see also
   the variable ‘apdl-deprecated-element-alist’ it’s a list with the
   deprecated elements and their respective replacements (for
   inspecting its content please click on above hyperlink or type
   "C-h v" and then type above variable name).

   Doing this using the <TAB> key might save you some typing in
   auto-completing the name.  When the characters before the cursor are
   not unambiguous a completion list is shown, select the suitable word
   from the list, either by navigation the cursor over the symbol and
   typing <RET> or clicking with the left (or middle) mouse button is
   completing the symbol.  Hitting the <SPACE> key removes the listing
   window.

   An example of an abbreviation is typing "‘do" (the backquote "‘"
   then "do") and the space key <SPC> triggers an interactive code
   template which inserts a *DO loop (‘apdl-do’).  Whereas typing "‘d"
   (and <SPC>) is an immediate version of a do loop without requesting
   user input (‘ansys_do’).  You can see all the predefined
   abbreviations with "‘?", i. e. a question mark "?"  after the
   backquote "‘".  Alternatively you might use the menu entry "List
   Mode Abbreviations" or the command ‘M-x list-abbrevs <RET>’ to
   inspect all definitions.

   Off course, in Emacs you can define your own abbreviations.
   #+texinfo: @inforef{Abbrev Concepts,,emacs}.
   But there is also the "dynamic" abbreviation facility. Please type
   the beginning of a word which is already present in the text and
   type `M-/`.
** Comment Handling
    commenting/un- for example of whole paragraphs.

  - "M-;" calls ‘comment-dwim’ (Do What I Mean ;-):

  In a code line: This command inserts comment char
  ‘apdl-indent-comment-string’ at ‘apdl-code-comment-column’ (if
  feasible, i. e. the code line is not too long).  With a prefix
  argument: Kill existing code comment.

  With an highlighted region: Commenting out (‘comment-region’) or
  Uncommenting (‘uncomment-region’) that region.

  In an empty line: Inserts ’!! ’ with the right indentation.

  - "C-M-j" (or "M-j", calls
    ‘indent-new-comment-line’).

  Breaks a code comment and inserts a single exclamation mark
  ’!’ (‘apdl-comment-char’) at column
  ‘apdl-code-comment-column’ (if possible).

  In comment lines ’!! ’ with two comment characters
  (‘apdl-indent-comment-string’) breaks the comment and begins a the
  same comment style at the current indentation.

  In an empty line or a line without comment: Just inserts a new
  line.

** Inserting Pairs
   Moreover there are keyboard shortcuts with which you are able to
   input pairs of corresponding characters, like ‘C-c %’ for ’%%’, the
   APDL substitution operators.  The advantage is that the cursor is
   placed between the pair and you might specify a region before this
   command to include the whole region.

   Alternatively you might provide numerical arguments to the call and
   you are able to enclose already existing words within the pair,
   e. q. "C-2 C-c %" enclosing the next two words inside the pair
   "%%".

   Please have a look for ‘insert-pair’ and check the menu entry of
   APDL-Mode's keybindings.

** Auto-indentation
   of looping and conditional blocks.

   You can customise the indentation depth (APDL Block Offset), please
   have a look for the entry ’Customise APDL Mode’ in the APDL-Mode
   menu.  The Emacs customisation facility optionally saves your
   choices automatically in your init (.emacs) file for later sessions.

** Closing of Control Blocks
   (*do, *if, ...) with the insertion of appropriate end keywords

   Typing "C-c ]" for the function `apdl-close-block’ completes the
   current APDL block with the insertion of a newline and an
   appropriate end keyword.

** Code Alignment
   Formatting of variable definitions:

   Typing "C-c C-a" to call the function ‘apdl-align’ will
   align a paragraphs or marked sections of variable definitions like
   the following

   #+begin_src apdl
   xyz=30.381      !this is a variable
   x = 0.4!this is another variable
   #+end_src

   which will be aligned to

   #+begin_src apdl
   xyz = 30.381 !this is a variable
   x   =  0.4   !this is another variable
   #+end_src

** Auto-insertion
   of code templates into new APDL files.

   Put the following section in your init (.emacs) file, in case you
   want to to include above skeleton (optionally) for every APDL file.

   #+begin_src emacs-lisp
   (auto-insert-mode 1)
   (add-hook ’find-file-hook ’auto-insert)
   (setq auto-insert-query t)
   (add-to-list ’auto-insert-alist ’(apdl-mode .
   [apdl-skeleton-outline-template]))
   #+end_src

   Please refer to the configuration example ‘apdl-config.el’.

* Code Navigation, Outlining and Hiding
  Navigating code lines, number blocks, and *DO,*IF, DOWHILE, *CREATE
  blocks, etc.

  "M-n" -- ‘apdl-next-code-line’ and
  "M-p" -- ‘apdl-previous-code-line’

  Are going to the next/previous code line, skipping intermediate
  comments and empty lines.

  The following block navigation commands are analogous to Emacs’
  inbuilt list/sexp (expressions in parentheses / balanced expression)
  navigation.

  "C-M-f" -- ‘apdl-next-block-end’
  "C-M-b" --‘apdl-previous-block-start-and-conditional’

  Above commands are skipping to the next/previous block end/start
  keyword regardless where you are already in the block structure.
  "C-M-b" for the function ‘apdl-previous-block-start-and-conditional’
  finds also *IF commands without bases of the keyword ’THEN’;
  furthermore *CYCLE and *EXIT looping controls.  These provide APDL
  constructs but represent no block depth and therefore are not
  considered when applying the following navigation commands.

  "C-M-n" -- ‘apdl-skip-block-forward’
  "C-M-p" -- ‘apdl-skip-block-backwards’

  Are looking for and skipping over a complete block (at the
  current block level, skipping possibly over deeper block
  structures).

  "C-M-u" -- ‘apdl-up-block’
  "C-M-d" -- ‘apdl-down-block’

  Are searching for and skipping up/down a block structure from the
  current block level.

  "C-c {" -- ‘apdl-number-block-start’
  "C-c }" -- ‘apdl-number-block-end’

  Are searching for and skipping over ’pure’ number blocks (the
  nblock, eblocks and cmblocks), these are common (and often quite
  large) in WorkBench solver input files (*.inp, *.dat).
** Hiding Number Blocks
  You can also hide and unhide these - usually uninteresting - blocks
  with M-x `apdl-hide-number-blocks' and M-x `apdl-show-number-blocks'
  respectively or even a region of your (dis)liking with M-x
  `apdl-hide-region'.  In files with the suffix ‘.dat’ number blocks
  are hidden by default.

** Outlining
   (folding and expanding) code sections.

   If you are using the preconfigured APDL-Mode then function
   ‘outline-minor-mode’ is switched on by default.

   With this mode you can hide certain sections of your code or
   navigate to customisable outline headings.  Certain characters --by
   default '!@' (see the variable ‘apdl-outline-string’)-- at the
   beginning of a line in your code represent such headings.  ’!@@’
   specifies a subheading and so on.  Check out the Outline menu
   entries.  Since Emacs 28.1 you are able to fold with <SHIFT>+<TAB>
   - and cycle outline states - all outline headings and on a header
   line the respective header with the <TAB> key.

   Please call the function ‘apdl-skeleton-outline-template’ to insert
   a skeleton of outline sections in your current file.

   In case outlining is not activate you might call Outline Minor Mode
   with "M-x outline-minor-mode" or you can enable this mode for the
   current session by ticking on the respective option in the menu or
   permanently by setting ‘apdl-outline-minor-mode’ for the
   ‘apdl-mode-hook’ variable.  Please type "M-x apdl-customise-apdl
   <RET>" or use the customisation system from the menu: ->APDL
   ->Customise APDL Mode.

* Variable Definitions
  Checking all variable definitions (*GET, *DIM, *SET, = and DO, ...)
  and component names (CM).

  Typing "C-c C-v" (for ‘apdl-display-variables’) shows all
  definitions in your APDL file in a separate window.  Together with
  the corresponding line numbers.  These numbers are links to the
  variable definition in the APDL buffer.  Clicking with the middle
  mouse button (button-2) on these numbers is showing the definition
  in its APDL context. You can also use the <TAB> key and Shift <TAB>
  to skip between the links and type <RET> to activate the links.

  You can remove the ’*APDL-variables*’ window with "C-x 4 k"
  (‘apdl-delete-other-window’).

  # When you place the cursor on the respective line number and type
  # "C-u M-g g", where "C-u" is a ’prefix’ argument for "M-g g"
  # (‘goto-line’)).  Emacs will then skip to the corresponding
  # definition line in the macro file.

  With a prefix argument for "C-c C-v" you are receiving the current
  value of the variable at the current cursor position.  For this to
  work it is necessary to have a running Ansys process under Emacs
  (GNU-Linux systems only, please see below the chapter about the
  [[*MAPDL Solver
   Control][MAPDL Solver Control]]).

* Sophisticated Highlighting
  The highlighting in the highest decoration level (please refer to
  ‘apdl-highlighting-level’) tries to follow the idiosyncratic
  Ansys solver/interpreter logic as closely as possible.  For
  example: ’* ’, an asterisk with following white-space(s), is still
  a valid APDL comment operator (although deprecated, see the Ansys
  manual for the *LET command).

  The font colourisation distinguishes between APDL commands,
  undocumented commands, parametric- and get-functions, elements
  (optionally also user variables) and deprecated elements.  In case
  of arbitrary characters after the command names, they are still
  highlighted, since these characters are ignored by the Ansys APDL
  interpreter.

  A macro is in the Ansys parlance some file with APDL code. In
  this sense it is used in the following documentation.
  Additionally you can create keyboard macros in Emacs to fasten
  your editing, please see ‘kmacro-start-macro’.

  APDL macro variables beginning with an underscore might be APDL
  reserved variables and therefore are highlighted in a warning face.
  Another example is the percent sign, its highlighting reminds you
  that the use of such a pair around a parameter name might force a
  parameter substitution, e. g. with the assignment ’I=5’ and
  ’/com,TEST%I%’, the /com command outputs TEST5.

  In the context of pairs of ’%’ characters, you can also input
  various pairs with keyboard shortcuts, e. g. apostrophes for APDL
  character parameters with ‘C-c’, please have a look which bindings
  are available with "C-h b" (for ‘describe-bindings’).

  The format strings of *MSG, *MWRITE, *VWRITE and *VREAD are also
  highlighted (in decoration levels 2, again please refer to
  ‘apdl-highlighting-level’).  Below is a summary of the C-format
  descriptors which can be used for above commands.  (with these
  format descriptors there are no parentheses needed in contrast to
  less general FORTRAN ones):

  %I                 Integer data
  %F                 Floating point format
  %G                 General numeric format
  %E                 Scientific notation
  %C,%S                 Character strings (up to 128 characters) or arrays;
  %/                 Line break
  %%                 Single percent sign
  %wI                 w is the column width. Integer is preceded by the number
  of blank characters needed to fill the column.
  %0wI           Same as above except integer is padded by zeroes instead of spaces.
  %0w.pI       Pad integer with zeros as necessary to obtain a minimum of p digits.
  %w.pF               w is the column width. Floating point format to p
  decimal places.
  %w.pG            General format with p significant digits.
  %w.pE            Scientific notation to p decimal places.
  %wC,
  %wS             Character string with column width of w.
  %-wC,
  %-wS            Left justify character string (right justify is default).
  %wX            Include w blank characters.

  example code:
  *vwrite,B(1,1),B(2,1)
  %E%/%E

  Regarding the highlighting of user variables: The idea is to give
  a visual hint whether variable names are spelled and used
  correctly everywhere not only at the place of its definition.

  For this to occur ‘apdl-highlighting-level’ must be set to 2 (the
  maximum, which is also the default), please have a look at the
  [[file:apdl-config.org][apdl-config.org]] file on how to change settings.

  Newly edited variable definitions are taken into account only
  when the variable ‘apdl-dynamic-highlighting-flag’ is set (for
  very large files this might slow Emacs and therefore the flag is
  only effective for files ending in ’.mac’) or every times you
  activating the variable display (with
  "C-c C-v", see below) in the maximum
  highlighting level (2).

* Process Management

  Even when there is no buffer under APDL-Mode, after starting Emacs,
  for example, it is possible to run selected APDL-Mode services.  You
  might run the license status from the mini-buffer with "M-x"
  `apdl-license-status' instead of calling it from the menu or with
  C-c C-l in an APDL-Mode buffer.  Here is the list of commands which
  are available from the mini-buffer without activating APDL-Mode:

  # from helper/autoload.sh
  apdl,
  apdl-mode,
  apdl-mode-version,
  apdl-user-license-status and
  apdl-license-status
  apdl-start-classics
  apdl-start-launcher


 - With the `apdl' command you can start a new file in APDL-Mode.
   With `apdl-mode' you switch to this mode for any file.

 - With `apdl-license-status' you can display available licenses.
   Under APDL-Mode you can use the keys "C-c C-l".  You will see the
   status of the license server in the **License** buffer.  In this
   buffer you can apply additional keys, for example "o" to show only
   selected licenses (compiled from the variable
   `apdl-license-occur-regexp').
   #+texinfo: @inforef{Regular Expressions,,elisp} for more information.

      # check: (info "(elisp)Regular Expressions")

   Please type "h" or "?" in the license buffer for a list of
   available keys.

 - You can start Ansys in interactive mode (`apdl-start-classics'),
   the Product Launcher (`apdl-start-launcher') or initiate a batch
   run for the current script (C-c C-y). You might suppress the
   locking feature of the solver with the environment variable
   ANSYS_LOCK=Off.  So you can run short batch jobs while using the
   Classics GUI with preppost as "viewer".

 - APDL-Mode writes for you an APDL stop file in the current directory
   (the file name is compiled from the variable ‘apdl-job’ and the
   extension ’.abt’).  You can do this with "M-x (<ALT> + x)
   apdl-write-abort-file" (‘apdl-write-abort-file’, you might
   previously use the Emacs command ’M-x cd’ to change the current
   directory).  This stop file is halting a running calculation in an
   orderly, restart enabled way.

 - You are able to view the Ansys APDL error file (a file consisting
   of the ‘apdl-job’ and the suffix ’.err’ in the current directory)
   with "C-c C-e" (this calls ‘apdl-display-error-file’).  The error
   file is opened in read only mode (see ‘read-only-mode’) and with
   the minor mode ‘auto-revert-tail-mode’ the buffer scrolls
   automatically to the end to keep the current output visible.

   The same is working for '.out' files with "C-c C-o" (for
   apdl-display-out-file) to monitor the convergence of your (batch)
   run.

 - You can start the Ansys Help Viewer from Emacs with "M-x
   apdl-start-ansys-help" (for ‘apdl-start-ansys-help’).  For this
   functionality you must have the help system installed otherwise you
   will be redirected to the online help in a browser, this is the
   default since Ansys 19.

 - You might also start the APDL product launcher from Emacs under
   windows or the APDL interpreter under GNU-Linux with "C-c RET" (for
   ‘apdl-start-ansys’).

- For displaying the licenses you are using type "C-c C-z"
  (`apdl-user-license-status').  Please type "h" or "?" in this
  license buffer for the list of available keys.

 If your Ansys installation is not in the default locations APDL-Mode
  might not be able to find its executables.  Or you want to use mixed
  Ansys version installations then it is necessary to customise some
  variables.  Either by calling the Emacs customisation facility
  ‘apdl-customise-apdl’ or from the menu bar -> ’APDL’ -> ’Customise
  APDL Mode’ -> ’APDL-process’ and look there for the variables ’Ansys
  License File’, ’Ansys Util Program’ and ’Ansys Help Program’ as well
  as ’Ansys Help Program Parameters’) or set the variables directly in
  your .emacs file.  Please have a look in apdl-config.org and the
  apdl-config.el customisation example.

* MAPDL Solver Control
  MAPDL interpreter and communication (mainly restricted to GNU-Linux
  systems).

  With the APDL-Mode keyboard shortcut "C-c RET" (for the command
  ‘apdl-start-ansys’) you can start the APDL solver/interpreter under
  GNU-Linux as an asynchronous process of Emacs.  After starting the
  run you will see all interpreter output in a separate Emacs ’comint’
  (command interpreter) window.  You are now able to interact with
  this process in three ways, either by typing directly in the
  ’*APDL*’ window or using "C-c C-c" (for ‘apdl-send-to-ansys’).  With
  the latter you can send either the current code line or a whole
  selected region to the running solver.  (A selected region means
  highlighted lines of code.  If there is no running solver the
  function copies the code to the system clipboard.)  And lastly you
  are able to send interactively APDL commands with "C-c C-q"
  (‘apdl-query-apdl-command’) without switching to the ’*APDL*’
  window.  If you would like to send your current code line in a
  slightly modified form, then give a prefix argument to
  ‘apdl-query-apdl-command’ and the line will be the initial input for
  sending it to the interpreter.

  Another very useful function in this context is "C-c C-u"
  (‘apdl-copy-or-send-above’), which sends all code from the beginning
  up to the current line to the solver/interpreter.  If there is no
  running interpreter the function copies the code to the system
  clipboard.

  The last two commands (‘apdl-copy-or-send-above’ and
  ‘apdl-send-to-ansys’) are skipping to the next code line (if
  possible).  If you don’t need this behaviour supply any prefix
  argument to them and the cursor will remain in the current line or
  in the last line of the previously highlighted region.

  When you are not familiar with Emacs’ keybindings you probably want
  to select your part of interest with dragging the mouse pointer
  while pressing the first mouse button.  Often it is faster to select
  regions with specialised keyboard commands.  For example "C-M-h"
  (‘apdl-mark-block’) marks a whole block level, "M-x mark-paragraph
  (‘mark-paragraph’) marks the current paragraph, the last command can
  not only be used to initialise a new selection but also to extend an
  existing one when repeating the command.  Please check the code
  navigation commands which APDL-Mode provides (type "C-h b"
  (‘describe-bindings’) to see which are available).

  In this mode you are able to start an Ansys graphics screen (without
  the rest of graphical user interface) with M-x apdl-start-graphics
  (function ‘apdl-start-graphics’).  Thus you are able to check and
  debug your macro file content visually.  The graphics in this state
  is changeable with APDL commands (like /view,1,1,1,1) but
  unfortunately not through mouse interactions!  If you want to turn,
  zoom, etc., the model it is best to call ‘apdl-start-pzr-box’ with
  C-c C-p and a dialog box will pop up.  This is the usual Ansys
  Pan/Zoom/Rotate dialog for the graphics screen.  But beware: Before
  you are able to send further commands to the solver, you first have
  to close the PZR dialog box.  There is also a family of interactive
  commands to reposition the graphics, like C-c C-+ (‘apdl-zoom-in’),
  re-plotting works with C-c C-r (‘apdl-replot’) and a fit to the
  screen with C-c C-f (‘apdl-fit’), of course, they are available from
  the menu as well.

  There is also a command for saving the data and ending the solver
  run: ‘apdl-exit-ansys’ and a command for an emergency kill in case
  the solver is not stoppable any longer in an orderly way:
  ‘apdl-kill-ansys’.

  As already indicated APDL-Mode has its own command for invoking the
  Ansys Help Viewer "M-x apdl-start-ansys-help" because unfortunately
  the following APDL commands do not work when the complete GUI system
  of Ansys is not active.

  /ui,help !is it not working in Ansys non-GUI modes help, COMMAND !is
  also not working in Ansys non-GUI modes

  So you are not able start the Help Viewer for a *specific* APDL
  command but must search within the Ansys Help Viewer or better use
  the much faster "C-c C-b".

# Local Variables:
# indicate-empty-lines: t
# show-trailing-whitespace: t
# time-stamp-active: t
# time-stamp-format: "%:y-%02m-%02d"
# End:
