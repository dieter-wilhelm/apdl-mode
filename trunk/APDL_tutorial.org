#+TITLE:     ANSYS-Mode Tutorial
#+AUTHOR:    H. Dieter Wilhelm
#+EMAIL:     dieter@duenenhof-wilhelm.de
#+DATE:      2012-06-19 Tue
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:2 num:nil toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
##+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:
#+PROPERTY: tangle yes

* Introduction to ANSYS-Mode
** Read the introductory ansys-mode_tutorial.pdf
   or use the online version.  You will learn that
   
  1. ANSYS-Mode is improving your workflow with
  2. Two parts: Run through some documentation then hands-on
  3. Simple download, installation (no admin rights), no configuration
     (for Win64/Lin64, but most things should run anyway)
  4. No costs and practically no license restrictions also for
     commercial use

* Usage as APDL viewer
*** Interesting even for pure WB users: true understanding with input files!

*** drag and drop: finite_field60.dat (M-n/p does not work in element numbered eblocks, nblocks!)

*** command-help from menu

*** -start-ansys-help from menu

***  navigation (number blocks in .dat files) C-c {

* Usage as APDL editor
** Code templates
Inspect some code templates (called skeletons in Emacs) in a preview window
*** type *C-c C-s* or choose the template preview from the ANSYS-Mode menu
Insert in the file APDL_tutorial.ansys here below this line the skeleton (C-u C-c C-s)  -structural-template
*** type *C-u C-c C-s* and choose the structural template
    or use the ANSYS-Mode menu to insert it
#+begin_src ansys  :tangle yes
  ! insert below this line the skeleton (C-u C-c C-s)  -structural-template
#+end_src

** Convenience features
*** List variable definitions *C-c C-v*
    rather not with very big, sys 60 MB ANSYS input files
*** Copy above code with *C-c C-u*
*** Copy code line or region with *C-c C-c*    

** Commenting, Un-commenting
*** mark some text with the mouse and type *M-;* 
 1. Marking blocks: *C-M-h*
 2. Marking paragraphs: *M-h*
!!    selecting blocks C-M-a/b setting mark!
*** mark commented region again and type again *M-;*
*** code comments M-j

** Use the Emacs integrated RPN Calculator
   RPN (Reversed Polish Notation, HP calculators are using this input convention

*** Place the cursor behind the assignment (=) and type *C-x* * *
    to fire up Emacs Calc
#+begin_src ansys : tangle yes
!! Place the cursor behind the assignment (=) and type C-x * * 
Pi =
!! Calculate a result in Emacs Calc and paste it into the APDL code with 'y'
#+end_src
    Calculate a result in Emacs Calc and paste it into the APDL code
    with *y*, type *q* to quit Calc

# !!    mouse selection ->copy to clipboard
# !! 0.) mouse selection does not work under Windows mouse-drag-copy-region!
# !! mouse copy on Windows the same on Linux only if (setq mouse-drag-copy-region t)

#+begin_src ansys : tangle yes
! continuation line with $
fini $ /clear
/prep7
*afun,deg
Pi = acos(-1)
*afun,rad
Pi = acos(-1)
x = 3.4 !lsk
y = .8	!ach
#+end_src

** Alignment of variable definitions

*** place the cursor on the following paragraph and type *C-c a*

#+begin_src ansys : tangle yes
!! place the cursor on the following paragraph and type C-c a
x=0.4!laskd
y= 33.0	    ! alskdl
xzv= 9999990.3	    !!
llk = 0.333333333 !bla
al_=  00.40
aslfÃ¶as = 304
ka= .4	    !salkd
i = 4.		    !as
kasd=.3/0.4
kasd =3./0.4
xxx =asin(3.0)
y = cos(i)
#+end_src

**  Completions
    case sensitive, except mouse completion
# !mouse completion of vglue
# vg
*** Completion of functions
    place the cursor behind 'ac' and type *M-TAB*
#+begin_src ansys : tangle yes
  !! place the cursor behind 'aco' and 'Aco' and type *M-TAB*
  Pi = aco
  Pi = Aco
#+end_src ansys
*** completion of Elements typ *M-TAB*
#+begin_src ansys : tangle yes
  !! Completion of Elements and Commands: typ M-TAB
  shell
  nse
#+end_src ansys
    
** Abbreviations facility
show the (locally) defined abbreviations with *C-u M-x list-abbrevs*
*** Use the ANSYS-Mode abbreviations
#+begin_src ansys : tangle yes
  ! Abbreviations typ a SPACE behind the characters
  `p   ! Pi assignment
  `d   ! do loop abbreviation
#+end_src
*** Use dynamic abbreviation completion
!!    type *M-/*
!!    default (,) commands but most */ can't be "*repeated"
#+begin_src ansys : tangle yes
  very_long_Variable = 3
  vlV = 8
#+end_src
*** type *M-TAB* repeatedly behind the 'v'
    (*ESC TAB* under Windows)
#+begin_src ansys : tangle yes
   v
#+end_src


** Insert pairs of characters
   possibly around a whole word or section
*** type *C-c %*
!!    C-c %,',M-"
#+begin_src  ansys : tangle yes
   XXXX=55
   /com,the result of XXXXX is XXXXX
#+end_src

** Closing of blocks, dynamic variable fontification
I 
!(progn (setq ansys-highlighting-level 1 ansys-dynamic-highlighting-flag nil) (ansys-mode))
!(progn (setq ansys-highlighting-level 2 ansys-dynamic-highlighting-flag t) (ansys-mode))

***  Ansys symbol completion and emacs expansion
     *C-c ]* -- -close-block
#+begin_src  ansys : tangle yes
*if,I,eq,1,then
  c*** otto
*elseif,I,le,10
  /com,help me
*else
  /title,well well
#+end_src
 
!C-c C-c, C-w copying lines, condensed input, default command
#+begin_src ansys : tangle yes
  x2 = 1 $ y2 = 1 $ z2 = 1 
  immed,on                 !show graphics immediately
  block,,x2,,y2,,z2
       ,x2,2*x2,,2*y2,,2*z2 !default command line 
#+end_src

/pnum,line,1 $ lplo

** materials & deprecated elements
#+begin_src  ansys : tangle yes
!! element types & deprecated element types
et,Steel,beam3 $ et,Alu,shell91
et,10,solid46
#+end_src


!bc
!solution 
!post 1 

!!    colon loop: e.g.: lfillt,(1:3),(2:4),Rad, lesize,(1:5:2),Esize
!!    preview C-c C-s (completion), insert skeletons
!!    (alternatively abbrev mode?)

!!    *go not for interactive mode! -> *if *else *endif

*** loading help navigator *C-c C-h*
***   display license status	-license-status *C-c C-l*

** Highlighting      
!!    _return & _status values

#+begin_src  ansys : tangle yes
N = _RETURN		 !_RETURN value of k command
_aaa = 9		 !reserved underscore "_" variables
Depth  = ARG1	  !ARG{1-9}, AR{10-19} = "*use" variables
/eof --- WARNING: /eof crashes the Ansys GUI in interactive mode ---
#+end_src

* APDL process interaction and debugging debugging environment (Unix only)
  Switch off menu-, tool- and scroll-bars

** Solver communication
*** *C-c C-u*, *C-c C-c*
    have changed their meaning sending directly to the solver
*** Write to the solver: *C-c C-q*
*** *M-w* (copies line)


# !meshing, colon loops, repeating
# lesi,(:)
# *repeat,2

# !!    Ansys mode help: C-h m, selfdocumenting features
# !!    online Ansys/Emacs process and debugging environment

       
** Visiting the ANSYS error file
*** tail mode of \*.err with *C-c C-e*

*** writing an abort file
*** bookmarks positions -> in bookmarks/registers/clone buffer?
*** *C-c @* outline stuff with indirect-buffer
*** Dired (textual renaming), speedbar, calendar
# !!    loading time: emacsclient alias "e"
# !!    shell-, config-mode, emacsclient, terminal-, ssh-support
# !!    C-S-backspace, basically the same keyboard shortcuts like bash
*** calc again: linear interpolation: a p [[x1,x2,..][y1,y2,...]] x
# !! online Ansys/Emacs process and debugging environment
# !! C-c C-u, C-c C-c,  C-c C-q
*** shell-, config-mode, emacsclient, terminal-, ssh-support, smb-support
*** image-viewer
*** pdf-viewer    
# !! C-S-backspace

** Embeded calc

0.416195720427

2 x => 2 x

   
* Last slide, Conclusion/Summary?
Thank you for your time


* Emacs introcuction
!! -- Very brief introduction: Emacs, why not?  Gnu Puplic Licens ->
# !!    Free, working on all current OSs.  All bells and whistle of a
# !!    modern editor (drop file into E), excellent documentation.  Chosen
# !!    because with Vim, Emacs is the best editor of all, but - especially
# !!    on Windows - programmed before Microsoft was even founded.
# !!    Drawbacks of Emacs, not adhering to established user interface
# !!    standards example: e. g. scroll-bar default location on linux on
# !!    the left,

# !!    Splitting windows (no tab concept for buffers)

# !!    TAB, M-TAB keys, C-s, C-c, C-v, C-x, C-y, C-z CUA-mode examples:
# !!    (setq scroll-preserve-screen-position t) (delete-selection-mode t)
# !!    Workaround: use in the beginning mouse and buttons.
   
# !!    convenient pre-configured emacs archive with Ansys mode.


# #+begin_src R :exports both
# # this is a comment, yeah :-)
#  bla <- 3
# bla 
# #+end_src
# #+RESULTS:
# : 3


######################################################################
#+begin_src ansys  :tangle yes
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! this is for Emacs:

!! local variables:
!! mode : ansys
!! end:
#+end_src
