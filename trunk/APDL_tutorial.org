# -*- mode: org -*-
#+TITLE:     Guided ANSYS-Mode hands-on Tutorial
######################################################################
# TODO
# Extensibility, Emacs self-documenting function help
# Get ansys-mode highlighted fonts into the tutorial

#+AUTHOR:    H. Dieter Wilhelm
#+EMAIL:     dieter@duenenhof-wilhelm.de
##+DATE:      2012-06-17 Sa
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:nil toc:1 \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:t ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:
#+PROPERTY: tangle yes
##+LaTeX_CLASS: koma-report
#+LaTeX_CLASS: koma-article

#+TEXT: WARNING: This is work in progress!
#+TEXT: The section `usage as APDL editor' is usable...

##+LATEX: \tableofcontents

* Introduction to ANSYS-Mode

[[./ansys+emacs.png]]
** Target audience  
   Editor mode <- mainly dealing with Text <- for APDL solver/interpreter
   1. APDL coders
   2. WorkBench command snippets
   3. WorkBench user interested in WB internals

      Interesting even for pure WB users: true understanding with input files!
** Read the introductory ansys-mode_tutorial.pdf
   or use the online version.  You will learn that
   
   ANSYS-Mode is improving your workflow with

  2. Two parts: Run through some documentation then hands-on
  3. Simple download, installation (no admin rights), no configuration
     (for Win64/Lin64, but most things should run anyway)

   No costs and practically no license restrictions also for
     commercial use

Immediate satisfaction, without regret :-)
Free, open, extensible

* Usage as APDL viewer
You can do all following actions from the menu *and* with keyboard
shortcuts.
** Open a WorkBench solver input file
    Drag and drop finite_field60.dat or use the menu:

#+ATTR_LaTeX: height=7.5cm
    [[./find_file_dialog.png]]

    (shortcut: *C-x C-f*)
** Use ANSYS-Mode's `command help'
#+ATTR_LaTeX: height=7.5cm
    [[./parameter_help.png]]

     (keybinding *M-?*)
** Open the `ANSYS help browser'
    (keybinding *C-c C-h*)
** Navigate through the `number blocks' in .dat files
   (keybinding *C-c {*)
* Usage as APDL editor
#+begin_src ansys :exports none
  !! This is the auto-generated APDL source of the ANSYS-Mode
  !! hands-on APDL tutorial (from APDL_tutorial.org)
  !! Copyright (C) 2006 - 2012 H. Dieter Wilhelm GPL V3
#+end_src
** Extensible APDL templates
#+begin_src ansys :exports none
   !@ --- APDL templates ---
#+end_src
*** Open this tutorial's APDL source file
#+begin_src ansys :tangle no
   !! Open `APDL_tutorial.ansys' in Emacs' `site-lisp' folder with "C-x C-f"!
#+end_src
*** Inspect available code templates
    Screenshot with the ANSYS Classics GUI (left) and Emacs (right) on Win64 

#+ATTR_HTML: width="1200"
   [[./template_menu.png]]
#+begin_src ansys :exports none
  !@@ -- Template preview --
#+end_src
#+begin_src ansys
   !! Check out all available APDL functions!
   !! Type "C-c C-s" to trigger the template preview
   !! and then the <TAB> key for a completion window.
#+end_src
   
#+ATTR_LaTeX: height=7.5cm
    [[./template_selection.png]]

**** Preview the APDL `function' template
#+begin_src ansys :exports none
  !@@@ - APDL parametric- and *get functions -
#+end_src
#+begin_src ansys
  !! Write now "ansys-skeleton-function"!  Let Emacs complete
  !! your input (use the <TAB> key).  Conclude it with <RET>.
#+end_src
*** Add a certain code template to your APDL code
#+begin_src ansys :exports none
  !@@ -- Template insertion --
#+end_src
#+begin_src ansys
  !! Insert below the following line the `ansys-structural-template'!
  !! Type "C-u C-c C-s" to insert it directly into this file.
#+end_src
After giving a short description, it should look like this:
#+begin_src ansys :tangle no
  !! Insert below the following line the `ansys-structural-template'!
  !! Type "C-u C-c C-s" to insert it directly into this file
  !! ------------------------------
  !@ --- file header ---
  !! ------------------------------
  !! Time-stamp: <Sat Jun 23 02:47:11 2012>
  !! ANSYS VERSION: 140
  !! UNITS: mm-t-s
  !! NOTE: template example
  !! ------------------------------
  ! fini
  ! /clear
  ! y
  /units,mpa !indicate mm-t-s unit system
  !@ --- Preprocessing ---
  /prep7
  !@@ -- Elements --
  Steel = 1
  ID = Steel
  real = Steel
  et,ID,solid186 !3d, 20 node
  !@@ -- Material --
  mp,nuxy,Steel,0.3 ! Poisson No
  mp,ex,Steel,200000 ! Elastic modulus
  !@@ -- Modeling --
  block,0,1,0,1,0,1
  !@@ -- Meshing --
  vmesh,all
  !@@ -- BCs, Loads --
  nsel,s,loc,x,0
  d,all,all
  nsel,s,loc,x,1
  d,all,uy,-.1
  allsel
  save
  !@ --- Solving ---
  /solu
  solve
  !@ --- Postprocessing --
  /post1
  plnsol,u,sum,2
#+end_src
*** Extend or create a template
Check out the code for a template, the Emacs self-documenting help
principle will guide you to its definition file.
#+begin_src ansys :exports none
  !@@ -- Extending your templates --
#+end_src
#+begin_src ansys
  !! Type "C-h f" and write "ansys-skeleton-structural-template"
  !! or let Emacs complete it!  
#+end_src
    
** APDL variable listing
#+begin_src ansys :exports none
  !@ --- List all variable definitions ---
#+end_src
    rather not with very big, say: 60 MB ANSYS input files
#+begin_src ansys
  !! Type "C-c C-v" for a variable summary window of the current definitions
#+end_src

#+ATTR_LaTeX: height=7.5cm
  [[./variable_buffer.png]]
    
** Comments
#+begin_src ansys :exports none
  !@ --- Comments ---
#+end_src
*** Commenting and uncommenting
#+begin_src ansys :exports none
  !@@ -- Commenting and uncommenting --
#+end_src
#+begin_src ansys
  !! Mark some text above (e. g. dragging the mouse with LMB)
  !! and type "M-;"
#+end_src
#  1. Marking blocks: *C-M-h*
#  2. Marking paragraphs: *M-h*
# !!    selecting blocks C-M-a/b setting mark!
After marking the whole paragraph with "M-h" and typing "M-;" above
code should look like the following
#+begin_src ansys :tangle no
  !! !! Insert below the following line the ansys-structural-template
  !! !! Type "C-u C-c C-s" to insert it directly into the file
  !! !! ------------------------------
  !! !@ --- file header ---
  !! !! ------------------------------
  !! !! Time-stamp: <Sat Jun 23 02:47:11 2012>
  !! !! ANSYS VERSION: 140
  !! !! UNITS: mm-t-s
  !! !! NOTE: template example
  !! !! ------------------------------
  !! ! fini
  !! ! /clear
  !! ! y
  !! /units,mpa !indicate mm-t-s unit system
  !! !@ --- Preprocessing ---
  !! /prep7
  !! !@@ -- Elements --
  !! Steel = 1
  !! ID = Steel
  !! real = Steel
  !! et,ID,solid186 !3d, 20 node
  !! !@@ -- Material --
  !! mp,nuxy,Steel,0.3 ! Poisson No
  !! mp,ex,Steel,200000 ! Elastic modulus
  !! !@@ -- Modeling --
  !! block,0,1,0,1,0,1
  !! !@@ -- Meshing --
  !! vmesh,all
  !! !@@ -- BCs, Loads --
  !! nsel,s,loc,x,0
  !! d,all,all
  !! nsel,s,loc,x,1
  !! d,all,uy,-.1
  !! allsel
  !! save
  !! !@ --- Solving ---
  !! /solu
  !! solve
  !! !@ --- Postprocessing --
  !! /post1
  !! plnsol,u,sum,2
#+end_src

*** Uncomment the code
#+begin_src ansys
  !! Mark above comments and retype "M-;"
#+end_src
*** Place inline comments
#+begin_src ansys :exports none
   !@@ -- Code comments --
#+end_src
#+begin_src ansys
  !! Type "M-j" somewhere in the following code line
  nsel,s,loc,x,0,1
#+end_src
    *M-j* does the right thing and places a comment character behind
     the code:
#+begin_src ansys :tangle no
  !! Type "M-j" somewhere in the following code line
  nsel,s,loc,x,0,1         ! this is an `inline comment'
#+end_src
** Align your variable definitions
#+ATTR_LaTeX: height=7.5cm
  [[./alignment.png]]
#+begin_src ansys :exports none
!@ --- Alignment of assignments ---
#+end_src
#+begin_src ansys
!! Place the cursor on this paragraph and type "C-c C-a"
x=0.4!laskd
y= 33.0	    ! alskdl
xzv= 9999990.3	    !!
llk = 0.333333333 !bla
al_=  00.40
aslföas = 304
ka= .4	    !salkd
i = 4.		    !as
kasd=.3/0.4
kasd =3./0.4
xxx =asin(3.0)
y = cos(i)
#+end_src
The result looks like the code below, with the numbers aligned
around the decimal point
#+begin_src ansys :tangle no
  !! Place the cursor on this paragraph and type "C-c C-a"
  x       =       0.4         !laskd
  y       =      33.0         ! alskdl
  xzv     = 9999990.3         !!
  llk     =       0.333333333 !bla
  al_     =      00.40
  aslföas =     304
  ka      =        .4         !salkd
  i       =       4.          !as
  kasd    =        .3/0.4
  kasd    =       3./0.4
  xxx     =        asin(3.0)
  y       =        cos(i)
#+end_src
** Completions (around 2000 ANSYS symbols)
    Case sensitive completions except for mouse completion
#+begin_src ansys  :exports none
  !@ --- Completions ---
#+end_src
#+begin_src ansys
  !! Check out all APDL symbols, up to date with the latest ANSYS version
  !! Place the cursor behind the 'c' character below and type "ESC TAB"
  c
#+end_src
  The completion window should look like the following:

#+ATTR_LaTeX: height=7.5cm
      [[./completion.png]]

# !mouse completion of vglue
# vg
*** Completion of functions
#+begin_src ansys  :exports none
  !@@ -- Function completion --
#+end_src
    Completed function names are getting their parentheses appended
#+begin_src ansys
  !! place the cursor behind 'aco' and type "ESC TAB" and so on
  P = aco
  P = Sig
  P = ARNE
#+end_src ansys
    The completions are unique in above examples and expand thus:
#+begin_src ansys :tangle no
  !! place the cursor behind 'aco' and type "ESC TAB" and so on
  P = acos()
  P = Sign()
  P = ARNEXT()
#+end_src ansys

*** Completion of elements
#+begin_src ansys  :exports none
  !@@ -- Element completions --
#+end_src
ANSYS-Mode also complets also ANSYS deprecated element names but warns
you with a distinct highlighting!
#+begin_src ansys
  !! Completion of element names: type "ESC TAB" behind `shell'
  shell
#+end_src ansys
*** Completion of commands
#+begin_src ansys :exports none
  !@@ -- APDL command completions --
#+end_src ansys
#+begin_src ansys
  !! Completion of command names: type "ESC TAB" behind `ns'
  ns
#+end_src ansys
*** Dynamic completion
#+begin_src ansys :exports none
  !@@ -- Dynamic completion --
#+end_src
# !!    type *M-/*
# !!    default (,) commands but most */ can't be "*repeated"

#+begin_src ansys
  !! some code...
  very_long_Variable = 3
  vlV = 8
  !!
  !! type "M-/" repeatedly behind below character
  v
#+end_src
After the first *M-/*:
#+begin_src ansys :tangle no
  !! ...
  !! type "ESC TAB" repeatedly behind below character
  vlV
#+end_src
After the second *M-/*:
#+begin_src ansys :tangle no
  !! ...
  !! type "ESC TAB" repeatedly behind below character
  very_long_Variable
#+end_src
** Abbreviations facility
#+begin_src ansys :exports none
  !@ --- ANSYS-Mode defined abbreviations ---
#+end_src
show the (locally) defined abbreviations with *C-u M-x list-abbrevs*
*** Use the ANSYS-Mode defined abbreviations
#+begin_src ansys
  !! type a <SPACE> behind the following code characters
  `p                      ! Pi assignment
  `d                      ! do loop abbreviation
#+end_src
    The abbreviations should expand to:
#+begin_src ansys :tangle no
  !! type a <SPACE> behind the following code characters
  Pi=3.14159265359
  ! Pi assignment
  *do,I,1,10,1
    
  *cycle !bypass below commands in *do loop
  *enddo
  
  ! do loop abbreviation
#+end_src
** Logical blocks (control statements)
#+begin_src ansys :exports none
   !@ --- Logical blocks ---
#+end_src
*** Closing of blocks, auto-indentation, dynamic variable fontification
# I 
# !(progn (setq ansys-highlighting-level 1 ansys-dynamic-highlighting-flag nil) (ansys-mode))
# !(progn (setq ansys-highlighting-level 2 ansys-dynamic-highlighting-flag t) (ansys-mode))
*** Ansys symbol completion and emacs expansion
     *C-c ]* -- -close-block
#+begin_src ansys :exports none
   !@@ -- Closing of APDL blocks --
#+end_src
#+begin_src ansys
  *if,I,eq,1,then
    c*** otto
  *elseif,I,le,10
    /com,help me
  *else
    /title,well well
  
  !! type in above empty line "C-c ]"
#+end_src
     Voila
#+begin_src ansys :tangle no
  *if,I,eq,1,then
    c*** otto
  *elseif,I,le,10
    /com,help me
  *else
    /title,well well
  *endif
  !! type in above empty line "C-c ]"
#+end_src
*** Auto-indentaton TODO!
#+begin_src ansys :exports none
   !@@ --- Auto-indentation --
#+end_src
#+begin_src ansys
   !! Insert in the following block another `*if' statement!
   !! Conclude the line(s) with "C-j" to receive an automatic indentation.
#+end_src
#+begin_src ansys
  *if,I,eq,1,then

    /title,well well
  *endif
#+end_src
    The line is indented to, don't forgot the shortcut "C-c ]" for
    closing the blocks
#+begin_src ansys :tangle no
  *if,I,eq,1,then
    *if,J,eq,2,then
      /com,the line is indented, close it with "C-c ]"
    *endif
    /title,well well
  *endif
#+end_src

*** Display license status	-license-status *C-c C-l*

** Use the Emacs integrated RPN Calculator
   RPN (Reversed Polish Notation), the HP calculators are using this input
   convention.

#+ATTR_LaTeX: height=7.5cm
  [[./calculator.png]]

#+begin_src ansys :exports none
!@ --- Emacs Calc ---
#+end_src
   Type *C-x* * * to open the calculator, type *y* for copying results
   directly into the APDL file. *q* to quit the 'Emacs Calc' windows.
#+begin_src ansys
  !! Place the cursor behind the equal sign and type "C-x * *"!
  Pi = 
#+end_src
#+begin_src ansys
!! Type "P" (capital p) in Calc and paste the value back into
!! your APDL code with the <y> key, quit Calc with <q>.
#+end_src
You are receiving
#+begin_src ansys :tangle no
  !@ --- Emacs Calc ---
  !! Place the cursor behind the equal sign and type "C-x * *"!
  Pi = 3.14159265359
#+end_src
** Highlighting APDL specials
#+begin_src  ansys : tangle yes
!@ --- ANSYS-Mode is highlighting APDL specials ---
#+end_src
*** Reserved words and _RETURN statements
#+begin_src  ansys : tangle yes
!@@ -- Reserved words and _RETURN statements --
#+end_src
   _return & _status values
#+begin_src  ansys : tangle yes
N = _RETURN	  !_RETURN value of commands
_aaa = 9          !reserved variables: preceding underscore "_" 
Depth  = ARG1	  !ARG{1-9}, AR{10-19} = "*use" variables

/eof --- WARNING: /eof crashes the Ansys GUI in interactive mode ---
#+end_src
***  Deprecated elements
#+begin_src ansys :tangle yes
!@@ -- Valid element types & deprecated element types
#+end_src
#+begin_src ansys :tangle yes
et,10,solid186      !186 current element type
et,Steel,beam3 $ et,Alu,shell91
#+end_src
Let's make it better!
#+begin_src ansys :tangle yes
  !! Complet the following element fragments!
  et,Steel,beam $ et,Alu,shell
#+end_src
For example to
#+begin_src ansys :tangle no
  et,Steel,beam188 $ et,Alu,shell28
#+end_src

* APDL processing environment 
  Switch off menu-, tool- and scroll-bars

** Start the ANSYS interpreter  
#+begin_src ansys :exports none
   !@ --- APDL processing ---
   !! Prerequisite: Unix/Linux system and configured ANSYS-Mode
#+end_src
#+begin_src ansys
   !! Start an ANSYS interpreter (solver process)
   !! Type "C-c RET" 
#+end_src
    
** Solver communication

** Copying to clipboard features
*** Copy above code with *C-c C-u*
#+begin_src ansys
  !@ --- Copy to clipboard ---
#+end_src
*** Copy code line or region with *C-c C-c*    
#+begin_src ansys :tangle yes
!@ --- Copy code ---
!! apply C-c C-u, C-c C-c
#+end_src

*** *C-c C-u*, *C-c C-c*
    have changed their meaning sending directly to the solver
*** Write to the solver: *C-c C-q*

*** *M-w* (copies line)

!C-c C-c, C-w copying lines, condensed input, default command
#+begin_src ansys : tangle yes
  x2 = 1 $ y2 = 1 $ z2 = 1 
  immed,on                 !show graphics immediately
  block,,x2,,y2,,z2
       ,x2,2*x2,,2*y2,,2*z2 !default command line 
#+end_src

/pnum,line,1 $ lplo

    

** Graphical feedback
*** Open the interactive graphics window of ANSYS with *C-c C-g*
*** Open the ANSYS Pan/Zoom/Rotate dialog *C-c C-p*
** Display the license status
   highlighted is your current license choice
*** *C-c C-l*   
** Visiting the ANSYS error file
*** tail mode of \*.err with *C-c C-e*

*** writing an abort file
*** bookmarks positions -> in bookmarks/registers/clone buffer?
*** *C-c @* outline stuff with indirect-buffer
*** Dired (textual renaming), speedbar, calendar
# !!    loading time: emacsclient alias "e"
# !!    shell-, config-mode, emacsclient, terminal-, ssh-support
# !!    C-S-backspace, basically the same keyboard shortcuts like bash
# !! online Ansys/Emacs process and debugging environment
# !! C-c C-u, C-c C-c,  C-c C-q
*** shell-, config-mode, emacsclient, terminal-, ssh-support, smb-support
*** image-viewer
*** pdf-viewer    
# !! C-S-backspace

** Insert pairs of characters
   Convenient when wrapping charcters around characters or a whole word
*** type *C-c %*
!!    C-c %,',M-"
#+begin_src  ansys : tangle yes
   XXXX=55
   !@ --- Inserting pairs of characters ---
   /com,the result of XXXXX is XXXXX
#+end_src


# !meshing, colon loops, repeating
# lesi,(:)
# *repeat,2
# !bc
# !solution 
# !post 1 

# !!    colon loop: e.g.: lfillt,(1:3),(2:4),Rad, lesize,(1:5:2),Esize
# !!    preview C-c C-s (completion), insert skeletons
# !!    (alternatively abbrev mode?)

# !!    *go not for interactive mode! -> *if *else *endif


# !!    Ansys mode help: C-h m, selfdocumenting features
# !!    online Ansys/Emacs process and debugging environment


# !!    mouse selection ->copy to clipboard
# !! 0.) mouse selection does not work under Windows mouse-drag-copy-region!
# !! mouse copy on Windows the same on Linux only if (setq mouse-drag-copy-region t)

#+begin_src ansys : tangle yes
! continuation line with $
fini $ /clear
/prep7
*afun,deg
Pi = acos(-1)
*afun,rad
Pi = acos(-1)
x = 3.4 !lsk
y = .8	!ach
#+end_src

** Outlining of the APDL code
   !@, !@@, !@@@ are grouping indicators
*** Switch on outline-minor-mode
*** Use the outline menu
   type *C-c @ C-t* collapsing the bodies
   type *C-c @ C-a* showing everything

** calc again
*** linear interpolation:
    a p [[x1,x2,..] y1, y2,...]] x
*** Embeded calc

0.416195720427
2 x => 2 x

   
* Emacs introduction
!! Emacs, why not?  Gnu Puplic License
*** *M-g M-g* goto line
*** Major mode menu
*** Buffer selection menu with *C-LMB*
*** PDF viewer
*** shell
*** File manager
*** TODO Image viewer image-dired    
# !!  Free, open, extensible, working on all current OSs.  All bells
# and whistle of a !!  modern editor (drop file into E), excellent
# documentation.  Chosen !!  because with Vim, Emacs is the best
# editor of all, but - especially !!  on Windows - programmed before
# Microsoft was even founded.  !!  Drawbacks of Emacs, not adhering to
# established user interface !!  standards example: e. g. scroll-bar
# default location on linux on !!  the left,

# !!    Splitting windows (no tab concept for buffers)

# !!    TAB, M-TAB keys, C-s, C-c, C-v, C-x, C-y, C-z CUA-mode examples:
# !!    (setq scroll-preserve-screen-position t) (delete-selection-mode t)
# !!    Workaround: use in the beginning mouse and buttons.
   
# !!    convenient pre-configured emacs archive with Ansys mode.


# #+PROPERTY: session *R*
# #+begin_src R -n -r :exports both
# # this is a comment, yeah :-)
#  bla <- 4 # (ref:bla)
# bla 
# #+end_src
# #+RESULTS:
# : 4
#    this is line [[(bla)]]

* Summary and Acknowledgements
Thank you for your time
**  Acknowledgements
    - RMS :: GNU Emacs
    - Carsten Dominik :: Org-mode for Emacs



######################################################################
#+begin_src ansys  :tangle yes :exports none
  !! End of APDL code
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !! this is for Emacs:
  
  !! local variables:
  !! mode : ansys
  !! end:
#+end_src
