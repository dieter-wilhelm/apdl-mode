= Ansys mode documentation =

== Requirements ==
== Features ==
== Installation ==
== Usage ==
== History ==
== Resources ==
== Bugs and Problems ==

== Requirements ==

The code is based on Ansys version 12.0 and is written for the editor
GNU Emacs (not consciously targeted for XEmacs).  It is tested with
Emacs 23.1 under XP and GNU/Linux.  The code won't run without some
minor adaptions with Emacs 21.4.  Please visit
ftp://ftp.gnu.org/pub/gnu/emacs/windows/ for an official, precompiled
Windows versions of GNU Emacs.  You can unpack Emacs in any directory.
Optionally you can run the program addpm.exe (located in the bin
directory) to add an Emacs entry to the Windows Start menu (please
refer to the README.W32 file).

The Ansys solver control and communication capabilities are mainly
restricted to UNIX systems.

== Features ==

* Ansys process management (viewing error files, license status, etc.)

* Solver control and comunication (UNIX only)

* Command syntax help (similar but more verbose then the Ansys
  dynamic prompt)

* Keyword (case-sensitive) completion of commands, elements, get- and
  parametric-functions of nearly 1900 Ansys symbols.

* Auto-indentation of looping and conditional blocks

* Closing of open blocks with insertion of the appropriate end
  keyword (case-sensitive)

* Code navigation,extended keyboard shortcuts for code lines,
  number blocks, *DO,*IF, DOWHILE, *CREATE block etc.

* Sophisticated highlighting (optionally also for user variables)

* Displays summary for all definitions (*GET, *DIM, *SET, = and
  *DO) of APDL variables.

* Use of the Emacs abbreviation facility for block templates

* Convenient comment handling, commenting out of whole paragraphs

* Outlining (hiding and navigating) of code sections with Emacs'
  outline-minor-mode

* Auto-insertion (and preview) of header and code templates for APDL
  files

== Installation ==

=== Short instructions ===

put the following paragraph into your ".emacs" file, restart Emacs (or
evaluate the definitions) and enjoy.

    (add-to-list 'load-path "c:\\directory-path\\where\\ansys-mode\\files\\reside")
      ;assuming you extracted the files in drive c: on a windows system
    (autoload 'ansys-mode "ansys-mode" nil t)
    (add-to-list 'auto-mode-alist '("\\.mac\\'" . ansys-mode))
       ;assuming the APDL files have the extension ".mac".
    (auto-insert-mode 1) ;needed for inserting Ansys skeleton
    (setq auto-insert-query t) ;insert skeleton only after request
    (add-to-list 'auto-insert-alist '(ansys-mode . [ansys-skeleton-compilation]))
    ;(setq ansys-dynamic-highlighting-flag t) ;helpful but still experimental

=== Verbose instructions ===

TODO:
* The most direct way of using ansys-mode.el is extracting the mode
  files somewhere on disk and loading the included definitions from
  there with the standard Emacs command `load-file' i. e.  type "M-x
  load-file RET", "M-x" means typing first the "Alt"-key and then the
  "x"-key simultaneously.  This gives you a prompt where you can type
  `load-file' followed by the "RET" key to conclude the command.  Then
  Emacs will prompt you for a file location.

  If you feel new to these concepts I'd suggest scrolling through the
  build-in tutorial of GNU Emacs (you'll find it in the help menu), it
  doesn't take much time and it will be worth it since it might show
  you some new editing tricks.

  After the definitions are loaded now into memory you have to type
  "M-x ansys-mode RET" for the files of interest to activate the mode.

* When it becomes annoying loading the Lisp file 'ansys-mode.el'
  every time you are starting Emacs anew, you should specify the
  path for this file in your '~/.emacs' file (the configuration
  file '.emacs' of GNU Emacs in your home directory '~\') and
  auto-load the function `ansys-mode':

     (add-to-list 'load-path
                  "c:\\your\\directory\\where\\mode\\files\\recides")
     (autoload 'ansys-mode "ansys-mode" "Activate Ansys mode." 'interactive)

  So far you only have to type "M-x ansys-mode RET" for every
  interesting APDL file.  With the following code you are also able
  to use the certain Ansys related functions without the need of
  previously having called Ansys mode.  When in your Emacs session
  there is already a file under Ansys mode, then they are available
  anyway.

     (autoload 'ansys-abort-file "ansys-mode" "Activate Ansys abort file function." 'interactive)
     (autoload 'ansys-display-error-file "ansys-mode" "Activate Ansys display error file function." 'interactive)
     (autoload 'ansys-start-ansys-help "ansys-mode" "Activate Ansys start help function." 'interactive)
     (autoload 'ansys-license-status "ansys-mode" "Activate Ansys license status function." 'interactive)

* When you intend to use the mode automatically, e.g. for all files
  you are opening with the extension '.mac' and '.inp' (WorkBench
  default solver input file suffix), add the following to your
  '.emacs' file:

     (add-to-list 'auto-mode-alist '("\\.mac$" . ansys-mode))
     (add-to-list 'auto-mode-alist '("\\.inp$" . ansys-mode))

  The suffix below belongs to the "anys neutral file" export format
  which contains also an APDL header and footer text

     (add-to-list 'auto-mode-alist '("\\.anf$" . ansys-mode))

* In case you also want to enjoy the auto insertion feature, which
  puts (optionally) some predefined body of Ansys commands to every
  new file--only those opened with `ansys-mode', of course--append
  the following to '.emacs':

     (setq auto-insert-mode 1)
     (setq auto-insert-query t) ;insert only after request
     (add-to-list 'auto-insert-alist '(ansys-mode . [ansys-skeleton-compilation]))

== Usage ==

* Please invoke the mode for an opened APDL file with the function
  `ansys-mode', i. e. typing "M-x" (the "Alt" key and the "x" key
  simultaneously, you'll end up in the Emacs minibuffer prompt), now
  type "ansys-mode" (you might apply the "TAB" key for the Emacs
  auto-completion feature at some intermediate stage) and conclude
  this input with the "RET" key.  Then check out the menu bar or type
  "C-h m" (i. e. the CTRL key together with the "h" key and then the
  "m" key), which provides you with a guide for its basic usage.

== Acknowledgements ==

(In no particular order):
rms,
Holger Sparr,
Eli Zaretzki,
Markus Triska,
Mathias Dahl,

History:

== History: ==

* The version scheme is a mixture of the Ansys version (12.0) on
  which some code is based and the version of the Ansys mode (1)
  itself.

=== Version 12.0.1 ===

* The lisp code had to be split up for better maintance, the code for
  ansys-mode is now provided in an archive file.

* There are now 3 highlighting levels to choose from

* The output from the LMUtil license tool (C-c C-l) is now filtered

* C-c C-c command is now generalised so that it does some sensible
  work without a running Ansys process

=== Version 11.0.2 ===

* Enabled the preview of code templates or fragments (called
  skeletons in this mode, please inspect `ansys-display-skeleton').

* Removed "buffer has no process" bug when killing an ansys-mode
  buffer

=== Version 11.0.1 ===

* Submitting interactively Ansys commands (via minibuffer query not
  only written in a macro file) to the solver process,
  ansys-query-ansys-command (C-c C-q)

=== ansys-mode.el version 11.0.1 in comparison to its predecessor
  ansys-mod.el: ===

* New: Provides Ansys command parameter- and syntax help.

* New: Offers Ansys process management: Acquiring license server
  information in a buffer Starting and stopping asynchronously
  Ansys runs.  Sending code lines to running Ansys process (sort of
  code debugging facility) and getting the output into a buffer.

* New: Experimental highlighting of user defined variables.
  Redefinition and clearing of variables is not yet taken into
  account

* New: Emacs customisation facility is available for the new Ansys
  mode group.

* New: Emacs outline-minor-mode is readily available in conjunction
  with this mode.

* Completions of Ansys commands are now case-sensitive, with
  additional completion of function and element names.

* Previously defined skeletons are fully functional now, new ones
  are added and enabled with the abbreviation and auto-load
  facilities of Emacs 22.

* Ansys' interpreter's disregard of any capitalisation is now fully
  taken into account in the highlighting.

* The apostrophe "'" is now assigned as the Ansys string and the
  value of character parameters delimiter and not wrongly "''";
  the strings are fontified accordingly.

* The dollar sign "$" is now emphasised as the Ansys condensed
  input character (multiple Ansys commands in one line).

* The colon ":" is now emphasised as the Ansys colon do loop
  character ("(x:y:z)" means from x to y, in z steps, z is equal to
  one as default).  For example: "n,(1:6),(2:18:2)" runs 6 loops.
  Colon loops are working also with real values: k,,(2.5:3:0.1) and
  with array parameters: k,,A(1:100), but the latter is an
  undocumented feature. Since ansys 11.0 the colon looping is also
  working with *GET functions (example: A(1:5)=NX(1:5))). A ":"
  indicates also a beginning of a label for the *GO and *IF
  command.

* "%" is now distinguished as the Ansys parameter substitution
  and format specifier character.

* The ampersand "&" is now correctly highlighted as the only
  available Ansys continuation character applicable to the format
  commands (*MSG, *MWRITE, *VREAD and *VWRITE) command and the
  subsequent format strings of the command are fontified.

* New: " *" (SPC before *) is indicated as an (Ansys deprecated)
  comment sign e. g.: "a = 3 **4" results in "a" setting to 3,
  whereas "a = 3**4" sets "a" to 81!

* New: A line beginning with a comma is indented to the lenght of
  the last non slash or asterisk command as a reminder that the
  Ansys solver interprets this as a space holder for the last
  command keyword (the Ansys default command concept).

* Extended documentation, code cleaning and simplification of
  commands (e.g. comment handling) with the application of standard
  Emacs 22 facilities among other things.

== Resources ==

http://www.emacswiki.org
http://www.ansys.net -- general Ansys repository
http://www.ansys.com
http://www.ansyssolutions.com -- The Ansys solutions magazine
http://www.xansys.org -- ansys online community

== Bugs and Problems ==

C*** does no parameter substitution, neither the /SYS command; this is
wrongly suggested in the variable highlighting of Ansys mode.  A
clearing of variables (VAR= ) is not taken into account

Ansys format line (multi-line) highlighting is somewhat brittle,
please use M-o M-o to update the fontification in case the format line
is not correctly highlighted.

The *END command is special: It needs 8 characters in all (+ 4
whitespaces to differentiate it from *ENDIF) before a comment
character behind it is accepted from the solver (please see the Ansys
12.0 manual), this is not yet indicated in ansys-mode.

=== Getting help ===

If you experience problems installing or running this mode you have
the following options:

* It might, at the first stage, be helpful for you to visit the
  Emacs Wiki (http://www.emacswiki.org/cgi-bin/wiki/AnsysMode) for
  further instructions.  At the Wiki you can also leave some
  comments or wishes.

* Write an email to the mode maintainer (you can trigger a bug report
  from the menu--at least a useful template when you are not in the
  position of sending emails within Emacs--or calling directly the
  function `ansys-submit-bug-report').

* When you have already a (cost free) Google account you are able
  to issue a bug report at the Google Code hosted page
  http://code.google.com/p/ansys-mode/issues/list.  From this site
  you can also download the latest development version.
