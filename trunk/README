This README is the Ansys mode documentation (The text formatting is
targeted for the Emacs Wiki)

Time-stamp: "2010-01-08 06:16:16 dieter"
Copyright (C) 2006 - 2010  H. Dieter Wilhelm GPL V3

== Introduction ==
Editor support for working with Ansys FEA.

This project provides Gnu Emacs editor support for working with the
FEA (Finite Element Analysis) program Ansys (http://www.ansys.com).
Gnu Emacs (http://www.gnu.org/software/emacs/) is an up-to-date,
powerful, yet free editor which is available for any operating system
where Ansys is running.  The software defines 'Ansys mode', a mode for
inspecting, writing and navigating in APDL (Ansys Parametric Design
Language) files and offers managing and communication capabilities for
Ansys solver processes as well.

The mode's capabilities are sophisticated but the comprehensive
documentation is targeted for Ansys users with little Emacs
experience.  Any suggestions for improvements are very welcome.  The
current stable version (ansys-mode-12.0.1) and development versions
are available at Google Code (http://code.google.com/p/ansys-mode).
For installing, further instructions and issues please have a look at
the Ansys mode Wiki (http://www.emacswiki.org/cgi-bin/wiki/AnsysMode).

== Table of contents ==

= Requirements
= Features
= Installation
= Usage and customisation
= Experienced Emacs users
= History
= Resources
= Bugs and Problems

== Requirements ==

The code is based on Ansys version 12.0 and is written for the editor
GNU Emacs (not consciously targeted for XEmacs).  It is tested with
Emacs 23.1 under XP and GNU/Linux.  The code won't run without minor
adaptions with Emacs 21.4.  Please visit
ftp://ftp.gnu.org/pub/gnu/emacs/windows/ for an official, precompiled
Windows versions of GNU Emacs.  You might unpack Emacs in any
directory.  Optionally you can run the program addpm.exe (located in
the bin directory) to add an Emacs entry to the Windows Start menu
(please refer to the README.W32 file).

The Ansys solver control and communication capabilities are somewhat
restricted on non-UNIX systems.

Ansys Mode needs now more than one lisp file, be sure you have all
necessary files, please see the == Installation == section for a list
of them.

== Features ==

* Ansys process management (viewing error files, license status,
  starting the Ansys help browser, etc.)

* Solver comunication facilities, i. e. sending code fragments from
  the macro file or commands interactively to an Ansys solver instance
  (UNIX only)

* Command syntax help in the editor (similar to but more verbose then
  the Ansys dynamic prompt) also with hints for undocumented commands

* Keyword completion of Ansys commands, elements, get- and
  parametric-functions (case-sensitive) of nearly 2000 symbols

* Comprehensive keyboard shortcuts for code navigation: Skipping
  comments, navigating number blocks, searching *DO-, *IF-, *DOWHILE-,
  *CREATE-blocks, etc.

* Syntax highlighting in various decoration levels (complete Ansys
  keywords, undocumented commands, deprecated elements, ...)  and
  optionally also user defined variables (experimental)

* Overview of *every* variable definition (*GET, *DIM, *SET, =, *DO,
  CM, *vget, ...) in the current file, shown in another window

* Preview and insertion (optionally auto-insertion) of header and
  Ansys code templates for APDL files.  Respective snippets represent
  examples of APDL work flows and considerable Ansys know-how and are
  easily extensible to boot

* Convenient comment handling, commenting out whole paragraphs or
  whole control blocks and vice versa

* Auto-indentation of looping blocks and conditional control blocks
  together with closing of open blocks with auto-insertion of the
  appropriate end keyword (case-sensitive)

* Outlining (hiding and navigating) of code sections with Emacs'
  outline-minor-mode

* Use of the Emacs abbreviation facility for block templates
  i. e. with writting a "nickname" Emacs exchanges the characters with
  a whole code template

* Ansys mode changes some Emacs defaults to smooth the transition from
  other editors

As a visual example, a screen-shot on EmacsWiki and Google code show
an Emacs frame with a ripped off Ansys menu field.  The APDL file is
in the right window with the (experimental) user variable highlighting
switched on and a help overlay (in yellow background) activated. The
smaller windows on the left hand side are showing the "Variable
definitions buffer" of the same file and a preview buffer of a certain
code template, respectively.

http://www.duenenhof-wilhelm.de/dieter/ansys-mode.jpg

== Installation ==

=== Files ===

Code:
* ansys-mode.el
* ansys-keyword.el
* ansys-template.el
* ansys-process.el

Auxiliaries:
* README -- this file
* TODO -- todos and deficiencies
* LICENSE -- the GPL V3 license
* default_.el -- configuration example of an Emacs default.el
* fontification.mac -- highlighting APDL example

=== Short instructions ===

==== Direct way; no file configuration necessary ====

Important prerequisite: Emacs must know where all the code (.el) files
reside!  Extract the mode archive into an Emacs directory which is in
its default load-path (a good place is the "site-lisp" folder in your
Emacs installation tree) or indicate the directory with the
environment variable EMACSLOADPATH).

From there on you must load first the mode definitions with `M-x
load-file ansys-mode RET', i. e. typing "M-x" (first) the "Alt" key
and then the "x" key simultaneously, you'll end up in the so called
Emacs minibuffer prompt, now type "load-file" (you might apply the
"TAB" key for the Emacs auto-completion feature at every intermediate
stage 8-)) and conclude this input with the "RET" key. Emacs will then
prompt you for a file, type in the path and "ansys-mode.el" and press
RET.  Thereafter call the mode function itself with `M-x ansys-mode
RET' for every new or existing APDL file.

==== More convenient way; file configuration necessary ====

Extract the files somewhere on disc and put the following paragraph
into your ".emacs" configuration file (in your home directory), adjust
the stuff in capital letters, restart Emacs and ansys-mode will be
automatically applied for all files with suffixes ".mac", ".dat" and
".inp".

    (add-to-list 'load-path "C:\\DIRECTORY-PATH\\WHERE\\THE\\ANSYS-MODE\\FILES\\RESIDE")
      ;assuming you extracted the files on drive "c:"
      ;for example: "c:\\emacs\\emacs-23.1"
    (add-to-list 'auto-mode-alist '("\\.mac\\'" . ansys-mode))
    (add-to-list 'auto-mode-alist '("\\.dat\\'" . ansys-mode))
    (add-to-list 'auto-mode-alist '("\\.inp\\'" . ansys-mode))
    (autoload 'ansys-mode "ansys-mode" nil t)

=== Verbose instructions ===

* direct way, no configuration necessary (loading "by hand")

Please consult the "direct way" description above.

If you are unfamiliar by these concepts I suggest working through the
build-in tutorial of GNU Emacs (you'll find it in the help entry in
the menu bar), it doesn't take too much time and the investment will
be worth it since it will accelerate your general editing capabilities
in the future.

* permanent configuration

When it becomes tiring of loading 'ansys-mode.el' every time you are
starting a new Emacs session, you should specify the installation path
for the mode files in your '~/.emacs' file (the configuration file
'.emacs' of GNU Emacs in your home directory '~\').

     (add-to-list 'load-path
		  "C:\\YOUR\\DIRECTORY\\WHERE\\MODE\\FILES\\RECIDE")
     (autoload 'ansys-mode "ansys-mode" "Activate Ansys mode." 'interactive)

From here you are able to type "M-x ansys-mode RET" to activate the
mode for every interesting file.

* automatic mode assignment

When you intend to apply the mode automatically, for all files with
the extensions ".mac", ".dat" and ".inp" ( .dat and .inp are
WorkBench's solver input file suffixes) you are opening, add the
following to your '.emacs' file:

     (add-to-list 'auto-mode-alist '("\\.mac$" . ansys-mode))
     (add-to-list 'auto-mode-alist '("\\.dat$" . ansys-mode))
     (add-to-list 'auto-mode-alist '("\\.inp$" . ansys-mode))

The suffix below belongs to the "anys neutral file" export format
which contains also an APDL header and footer.

     (add-to-list 'auto-mode-alist '("\\.anf$" . ansys-mode))

* autoinsertion of code

In case you also want to enjoy the auto insertion feature, which puts
(optionally) some predefined body of Ansys commands to every new APDL
file insert the following into '.emacs':

     (setq auto-insert-mode 1)
     (setq auto-insert-query t) ;insert only after request
     (add-to-list 'auto-insert-alist '(ansys-mode . [ansys-skeleton-compilation]))

* autoloading of helper functions

With below section you are also able to use certain Ansys related
commands in a new Emacs session without the need of previously having
explicitely called ansys-mode.

     (autoload 'ansys-customise-ansys "ansys-mode" "Activate the function for calling a special Ansys customisation buffer." 'interactive)
     (autoload 'ansys-abort-file "ansys-mode" "Activate the function for  aborting Ansys runs." 'interactive)
     (autoload 'ansys-display-error-file "ansys-mode" "Activate the function for inspecting the Ansys error file." 'interactive)
     (autoload 'ansys-start-ansys-help "ansys-mode" "Activate the function for starting the Ansys help browser." 'interactive)
 TODO: -license-file, -license-program variables
     (autoload 'ansys-license-status "ansys-mode" "Activate the function for displaying Ansys license status or starting a license utility." 'interactive)

* further configuration method

As a summary and example to these and further customisation options
please have a look at the accompanying "default_.el" example. This is
helpful especially if you intend to use the mode's solver
communication capabilities.  This file can be used, after renaming it
to "default.el" and adjusting as as system wide startup file for Emacs
in the "EMACS_INSTALLDIR/site-lisp" directory and is therefore an
alternative to customisations in ".emacs", your personal configuration
file.

== Usage and customisation ==

When you have a file under `ansys-mode' check out the menu bar's
"Ansys" entry for its possibilities and select the entry "Describe
Ansys Mode" or type "C-h m" (i. e. the CTRL key together with the "h"
key and subsequently the "m" key), which will display the Ansys mode
help which is your "online" guide for its usage and customisation 8-).


Templates, i.e. code snippets or skeletons might be extended in
"ansys-template.el" and can be used similar or complementary to a
classical Ansys macro library.

== Experienced Emacs users ==

Ansys mode changes the default behaviour of Emacs

Warning globally: (delete-selection-mode t)

locally: (setq scroll-preserve-screen-position t)
locally: M-h (mark-paragraph) has improved, in my opinion

== Acknowledgements ==

In no particular order:

Holger Sparr,
Eli Zaretzki,
Markus Triska,
Mathias Dahl,
rms

== History: ==

The version scheme is a mixture of the Ansys version (12.0) on which
some code is based and the version of the Ansys mode (1) itself.

=== Version 12.0.1 ===

* The lisp code had to be split up for better maintance, the code
  files for are now provided in an archive.

* Reworked the fontification mainly for the sake of speed.  There are
  now highlighting levels to choose from, offering e. g. higlighting
  of deprecated element types in a warning-face, deprecated Ansys *
  comments, ...

* Reworked and hopefully improved the mode's help and README

* The output from the LMUtil license status tool (C-c C-l) is now
  filtered to be more concise.

* The `ansys-send-to-ansys' (C-c C-c) and the
  `ansys-copy-or-send-above' (C-c C-u) commands are now generalised so
  that they are also doing some useful stuff without a running Ansys
  process (they copy in that case the cursor line/the chosen region
  and from the file beginning to the cursor line, respectively, to the
  clipboard).

* Added tooltips to all Ansys menu entries.

* Ansys mode tries to gather information from the OS environment when
  the variable `ansys-license-file' is not set by the user and uses
  now Ansys standard names as default values for some more variables.

* The variables in the variable summary are now sorted according to
  their first occurance and not any longer in "definition types".  Now
  component names are included with the variable highlighting.

* Added menu entry for reloading Ansys Mode for the case when certain
  customisation options in the code files itself are changed and
  require a code reloading to take effect.

=== Version 11.0.2 ===

* Enabled the preview of code templates or fragments (called
  skeletons in this mode, please inspect `ansys-display-skeleton').

* Removed "buffer has no process" bug when killing an ansys-mode
  buffer.

* Submitting interactively Ansys commands (via minibuffer query not
  only written in a macro file) to the solver process,
  ansys-query-ansys-command (C-c C-q).

=== ansys-mode.el 11.0.1 in comparison to ansys-mod.el: ===

* New: Provides Ansys command parameter- and syntax help.

* New: Offers Ansys process management: Acquiring license server
  information in a buffer Starting and stopping asynchronously
  Ansys runs.  Sending code lines to running Ansys process (sort of
  code debugging facility) and getting the output into a buffer.

* New: Experimental highlighting of user defined variables.
  Redefinition and clearing of variables is not yet taken into
  account.

* New: Emacs customisation facility is available for the new Ansys
  mode group.

* New: Emacs outline-minor-mode is readily available in conjunction
  with this mode.

* Completions of Ansys commands are now case-sensitive, with
  additional completion of function and element names.

* Previously defined skeletons are fully functional now, new ones
  are added and enabled with the abbreviation and auto-load
  facilities of Emacs 22.

* Ansys' interpreter's disregard of any capitalisation is now fully
  taken into account in the highlighting.

* The apostrophe "'" is now assigned as the Ansys string and the
  value of character parameters delimiter and not wrongly """;
  the strings are fontified accordingly.

* The dollar sign "$" is now emphasised as the Ansys condensed
  input character (multiple Ansys commands in one line).

* The colon ":" is now emphasised as the Ansys colon do loop
  character ("(x:y:z)" means from x to y, in z steps, z is equal to
  one as default).  For example: "n,(1:6),(2:18:2)" runs 6 loops.
  Colon loops are working also with real values: k,,(2.5:3:0.1) and
  with array parameters: k,,A(1:100), but the latter is an
  undocumented feature. Since ansys 11.0 the colon looping is also
  working with *GET functions (example: A(1:5)=NX(1:5))). A ":"
  indicates also a beginning of a label for the *GO and *IF
  command.

* "%" is now distinguished as the Ansys parameter substitution
  and format specifier character.

* The ampersand "&" is now correctly highlighted as the only
  available Ansys continuation character applicable to the format
  commands (*MSG, *MWRITE, *VREAD and *VWRITE) command and the
  subsequent format strings of the command are fontified.

* New: " *" (SPC before *) is indicated as an (Ansys deprecated)
  comment sign e. g.: %% a = 3 **4 %% results in "a" having the value
  3, whereas %% a = 3**4 %% sets "a" to 81!

* New: A line beginning with a comma is indented to the lenght of
  the last non slash or asterisk command as a reminder that the
  Ansys solver interprets this as a space holder for the last
  command keyword (the Ansys default command concept).

* Extended documentation, code cleaning and simplification of
  commands (e.g. comment handling) with the application of standard
  Emacs 22 facilities among other things.

== Resources ==

http://www.emacswiki.org
http://www.ansys.net -- general Ansys repository
http://www.ansys.com
http://www.ansyssolutions.com -- The Ansys solutions magazine
http://www.xansys.org -- ansys online community

== Bugs and Problems ==

For an overview of the outstanding issues please have a look in the
TODO file.

The "user variable" highlighting is still experimental, new variable
definitions are taken into account only when the variable
ansys-dynamic-highlighting-flag is set or any time you are activating
the variable display (with C-c C-v in the maximum highlighting level).

Ansys "format line" (multi-line) and "user variable" highlighting
(when above mentioned flag is not set) are somewhat brittle, please
use M-o M-o to update the fontification in case the format line and
all variables are not highlighted correctly.

=== Getting help ===

If you experience problems installing or running this mode you have
the following options:

* Write an email to the mode maintainer (you can trigger a bug report
  from the menu--at least a useful template when you are not in the
  position of sending emails within Emacs--or calling directly the
  function `ansys-submit-bug-report').

* When you have already a (cost free) Google account you are able
  to issue a bug report at the Google Code hosted page
  http://code.google.com/p/ansys-mode/issues/list.  From this site
  you can also download the latest development version.

* It might be helpful for you to visit the Emacs Wiki
  (http://www.emacswiki.org/cgi-bin/wiki/AnsysMode).  At the Wiki you
  can add some comments or wishes.

Local Variables:
word-wrap: t
show-trailing-whitespace: t
time-stamp-active: t
indicate-empty-lines: t
End:
