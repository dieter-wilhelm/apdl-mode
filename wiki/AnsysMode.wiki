#labels Phase-Deploy
== Requirements ==

It is based on Ansys version 10.0 and is written with GNU Emacs 22.
It is tested with version 22.0.90 under XP and GNU/Linux.  The code
won't run with Emacs 21.4 (and below) and is not targeted for
XEmacs.  Please visit ftp://ftp.gnu.org/pub/gnu/emacs/windows/ for
Windows versions of GNU Emacs.

The Ansys solver communication capabilities are mainly restricted
to UNIX systems.

The experimental user variable highlighting is currently only
implemented for files with a '.mac' extension.


== Installation ==

=== Short instructions ===

    (autoload 'ansys-mode "ansys-mode100" nil t)
       ;assuming ansys-mode100.el directory is in load-path!
    (add-to-list 'auto-mode-alist '("\\.mac\\'" . ansys-mode))
       ;assuming your Ansys files have the extension .mac.
    (auto-insert-mode 1)
    (setq auto-insert-query t) ;insert only after request
    (add-to-list 'auto-insert-alist '(ansys-mode . [ansys-skeleton]))
    ;(setq ansys-dynamic-highlighting-flag t) ;helpful but experimental

=== Verbose instructions ===

* The most direct way of using ansys-mode100.el is storing the file
  somewhere on disk and loading the included definitions from there
  with the standard Emacs command `load-file' i. e.  type "M-x
  load-file RET", "M-x" means typing first the "Alt"-key and
  then the "x"-key simultaneously.  This gives you a prompt where
  you can type `load-file' followed by the "RET" key to conclude
  the command.  Then Emacs will prompt you for a file location.

  If you feel unsure about these concepts I urgently recommend to
  you strolling through the build-in tutorial of GNU Emacs (you'll
  find it in the help menu of Emacs), it doesn't take much time and
  the investment will also help you speeding up your general
  editing tasks.

  When the definitions are loaded into memory you must type "M-x
  ansys-mode RET" for the files of interest to activate the mode.

* When it becomes annoying loading the Lisp file 'ansys-mode100.el'
  every time you are starting Emacs anew, you should specify the
  path for this file in your '~/.emacs' file (the configuration
  file '.emacs' of GNU Emacs in your home directory '~\') and
  auto-load the function `ansys-mode':

     (add-to-list 'load-path
                  "c:\\your\\directory\\where\\ansys-mode100.el\\recides")
     (autoload 'ansys-mode "ansys-mode100" "Activate Ansys mode." 'interactive)
     (autoload 'ansys-abort-file "ansys-mode100" "Activate Ansys abort file function." 'interactive)
     (autoload 'ansys-display-error-file "ansys-mode100" "Activate Ansys display error file function." 'interactive)
     (autoload 'ansys-start-ansys-help "ansys-mode100" "Activate Ansys start help function." 'interactive)
     (autoload 'ansys-license-status "ansys-mode100" "Activate Ansys license status function." 'interactive)

  So far you only have to type "M-x ansys-mode RET" for every
  interesting APDL file.

* When you intend to use the mode automatically, e.g. for all files
  you are opening with the extension '.mac' and '.inp', add the
  following to your '.emacs' file:

     (add-to-list 'auto-mode-alist '("\\.inp$" . ansys-mode))
     (add-to-list 'auto-mode-alist '("\\.mac$" . ansys-mode))

* In case you also want to enjoy the auto insertion feature, which
  puts (optionally) some predefined body of Ansys commands to every
  new file--only those opened with `ansys-mode', of course--append
  the following to '.emacs':

     (setq auto-insert-mode 1)
     (setq auto-insert-query t) ;insert only after request
     (add-to-list 'auto-insert-alist '(ansys-mode . [ansys-skeleton]))


== Features ==

* Ansys process management (viewing error files, license status,
  etc.)

* Ansys solver control and comunication (mainly UNIX)

* Ansys command syntax help (similar but more verbose then the
  Ansys dynamic prompt)

* Ansys keyword (case dependent) completion of commands, elements,
  get- and parametric-functions (nearly 1900 symbols).

* Auto-indentation of looping and conditional blocks

* Closing of open blocks with insertion of the appropriate end
  keyword (also case dependent)

* Code navigation,extended keyboard shortcuts: Code lines, number
  *blocks, *DO,*IF, DOWHILE, *CREATE block etc.

* Sophisticated highlighting (optionally also for user variables)

* Displays summary for all definitions (*GET, *DIM, *SET and = ) of
  APDL variables.

* Use of the Emacs abbreviation facility for block templates

* Convenient comment handling, commenting out of whole paragraphs

* Outlining (hiding and navigating) of code sections

* Auto-insertion of header and code templates into new APDL files


== Usage ==

* Please invoke the mode function `ansys-mode' with typing "M-x"
  then "ansys-mode" in the Emacs minibuffer prompt and conclude
  your input with the "RET" key.  Then type "F1" or "C-h m"
  i. e. the CTRL key together with the "h" key and then the "m"
  key, which gives you an Emacs buffer with basic usage guides.


== History: ==

=== Acknowledgements ===

rms

Holger Sparr
Eli Zaretzki
Markus Triska
Mathias Dahl

=== Version 100.1 ===

* The versioning scheme is a mixture of the used Ansys version
  (major versioning number) and the version of the Ansys mode
  (minor versioning number).

* Feature freeze: 2006-10-02

=== ansys-mode100.el version 1 in comparison to its predecessor
  ansys-mod.el: ===

* New: Provides Ansys command parameter- and syntax help.

* New: Offers Ansys process management: Acquiring license server
  information in a buffer Starting and stoping asynchronously Ansys
  runs.  Sending code lines to running Ansys process (sort of code
  debugging facility) and getting the output into a buffer.

* New: Experimental highlighting of user defined variables.
  Redefinition and clearing of variables is not yet taken into
  account

* New: Emacs customisation facility is available for the new Ansys
  mode group.

* New: Emacs outline-minor-mode is readily available in conjunction
  with this mode.

* Completions of Ansys commands are now case sensitive available,
  with additionally enabled completion of function and element
  names.

* Previously defined skeletons are fully functional now, new ones
  are added and enabled with the abbreviation and outo-load
  facilities of Emacs 22.

* Ansys' interpreter's disregard of any capitalisation is now fully
  taken into account in the highlighting.

* The apostrophe "'" is now assigned as the Ansys string and the
  value of character parameters delimiter and not wrongly """;
  the strings are fontified accordingly.

* The dollar sign "$" is now emphasised as the Ansys condensed
  input character (multiple Ansys commands in one line).

* The colon ":" is now emphasised as the Ansys colon do loop
  character ("(x:y:z)" means from x to y, in z steps, z is equal
  to one as default).  For example: "n,(1:6),(2:18:2)" runs 6
  loops.  Colon loops are working also with real values:
  k,,(2.5:3:0.1)).  (":" indicates also a label beginning for the
  *GO command)

* "%" is now distinguished as the Ansys parameter substitution
  and format specifier character.

* The ampersand "&" is now correctly higlighted as the only
  available Ansys continuation character only applicable to the
  *MSG command and the subsequent format strings of the command are
  fontified.

* New: " *" (SPC before *) is indicated as an (Ansys deprecated)
  comment sign e. g.: "a = 3 **4" results in "a" setting to 3,
  whereas "a = 3**4" sets "a" to 81!

* New: A line beginning with a comma is indented to the lenght of
  the last non slash or asterisk command as a reminder that the
  Ansys solver interprets this as a spaceholder for the last
  command keyword (the Ansys default command concept).

* Extended documentation, code cleaning and simplification of
  commands (e.g. comment handling) with the application of standard
  Emacs 22 facilities among other things.


== TODO, BUGS and PROBLEMS ==

If you experience problems installing or running this mode you have
the following options:

* It might, at the first stage, be helpful for you to visit the
  Emacs wiki (http://www.emacswiki.org/cgi-bin/wiki/AnsysMode) for
  further instructions.  At the Wiki you can also leave some
  comments or wishes.

* Write an email to the mode maintainer (you can trigger a bug
  report from the menu--at least a useful template when you so
  unfortunate and not able to send emails via Emacs--or call the
  function `ansys-submit-bug-report').

* When you have already a (cost free) Google account you are able
  to issue a bug report at the Google Code hosted page
  http://code.google.com/p/ansys-mode/issues/list, where you can
  also download the latest development version of this mode.

=== FOR RELEASE ===

completion of blocks is not case dependent

*if might end without an *endif: exit, stop, etc.

format string for *VWRITE, *CFWRITE, *ASK, *VREAD, PARSAV, PARRES,
*IF, *ELSEIF and *MWRITE similar to *MSG

M-/ (when -dynamic-h)

does setting of -hook trigger immediately the effects or is a
restart necessary? other function as well

read every symbol docu string ->NEW_C or _C or OCTAVE_C

testing: padt.mac /*commands and default command lines, every menu
entry: compilation, FIXMES

dry run: Emacs -Q

checkdoc

publication: (when Emacs22) ANSYS.net (Sheldon Imaoka
<sheldonimaoka@yahoo.com>), CadFem (Stephan Gotthold, Nelson,
Hanke, Krueger), Perras, AnsysWB community, Ansys users club, the
Focus guys (PADT), Google Code, Holger Sparr.

Emacs installation for Ansys under XP, default.el in site-lisp dir.

=== FUTURE VERSIONS ===

update every ansys-modeXXX.el entry (code, wiki, makefile).

checkdoc

menu entries: ->, Keyboard input: ", stressing ', Ansys commands:
upcased, code in docu: 4 columns indented

==== Important ====

Parameter help also for get and parametric functions include the
_RETURN value of the solid modelling commands into their help
strings of parameter help.  Help should be visible while there is
use input (overlay, new buffer?)  (setq mode-line-format nil);no
mode line for this buffer
with-output-to-temp-buffer
temp-buffer-show-hook

indicate with activation/inactivation of menu items that an
asynchronous job is already running or not.

check for EXIT command and wait some time to update the mode line
run status correctly

Unambiguous Ansys commands with additional characters at the end
are not found in the parameter help (C-c C-h) example: *vwroooo

provide skeleton for outline headings
split ansys-skeleton into header and code section, split code
section into smaller, handy Ansys-skeletons templates, snippets and
skeletons for specialised calculations: rubber, post26, gasket, ...

warn when abandoning macro file with an associated Ansys process.

templates with completing-read
abbrev `d does not indent properly in another block level

make M-C-h more intelligent like M-h

Enable input directly in the Ansys output buffer (*Ansys*) like in
the *shell* or *Python* buffer (run-python)

C*** does no parameter substitution, neither /SYS!!!! this is
wrongly suggested in ansys-mode100

remove vestiges of ansys-mod.el for making ansys-mode100.el GPL
proof.  Check whether octave-mod.el really is GPL compliant.

==== Less Important ====

replace/extend column-ruler with ruler-mode or ruler implemented as
overlay in buffer

multiple cleanup:_typ= $ _nm= $ _tag= $ _acnt= $ _temp=: variable
fontification is not working

Capitalized variable fontification clashes with small letter Ansys
predicates.  Fx=3 -> *get,Fx,fsum,,item,fx, make fontification case
dependent?

startup screen for Ansys mode: Mode help, Ansys version, supressing
the startup screen
'ansys-mode-startup-message
 maybe as advice when sluggish -> compiliation

read ansys-license-file from env, supply sane standard Ansys values
for the helper programs and check for existance

Try to ask only for the installation directory for the -license-file,
-program, etc. variables.  Read some information from getenv.

make everything completely customisable, eg auto-insert stuff
customisable enable Emacs customisation of auto-insert-query and
auto-insert-alist

provide auto insertion restricted to files opened with Ansys mode

provide Ansys `y' request and carriage return?

Fontify completion list distinguishing elements: commands,
functions and keywords.

sort customisation options for processes into subgroup
(defgroup octave-inferior nil
  "Running Octave as an inferior Emacs process."
  :group 'octave)

provide a list of options for the -license function, set this
function in the defcustom lmstat -a etc.

C-c C-c shouldn't send empty lines in regions, especially at the
end, to the solver.  Use a filter?

Variables beginning with an underscore are reserved for Ansys GUI
and Ansys supplied macros.

Optimisation (look at regexp with *), nested repetition regexp
operators

-start-ansys
finding an Ansys /filnam command in current macro file
and suggesting this as current job-name optionally
kill old job when called again with working run
warn and optionally remove the ansys lock file before starting a run

enable one run for every Ansys macro buffer

choice for /show,3d or x11

ansys process support might run on darwin systems as well? Does
Ansys run on Darwin at all? FIXME

Wrong highlighting of variables in /com, c*** text strings

deleting paramters with `PARAM=' or `*set,PARAM,' is not taken into
account when dynamically highlighting user variables.  Redefinition
of variables leaves the old definitions valid ->invalidate
font-locking there.  Variable highlighting in strings is not
working (string substitution).  Variables are getting overwritten
with Ansys keywords.

dynamic highlighting is only implemented for .mac files

make the line number display in `ansys-display-variables'
(hyper-)links to the corresponding code line in the respective APDL
file.  (See `occur' function.)  Or use the imenu mechanism for this
and display the variables in the speedbar

Better documentation, info file, refcard, etc; GNU programming
guideline: More requires?, indicate replacement of standard Emacs
facilities (e. g M-C-n, M-C-p), profiling, major mode conventions:
multiple loading of this mode?, XEmacs testing.

DEFSUBSTs with DEFUNs inside aren't particularly helpful?

ansys-indicate-empty-lines also for non-window systems (with
overlays)

see www.apdl.de for ideas and extensions

Implement highlighting of brackets with the correct level in Ansys
get- and parametric- functions.

Provide customisable choice whether commands, functions and/or
elements are assembled in the completion list.

auto-indent-switch as defcustom?

inhibit the unnecessary blink-matching-block display when closing a
block behind a block-end keyword

tool-tips for the menus

higlight matching block keywords (similar to show-paren-mode) when
point is at keyword

highlighting of plot commands inside the /GCMD command

Warn when - unintentionally - arguments are used for Ansys commands
which do not allow arguments.  Or implement some auto-newline
feature?  But problematic in condensed command lines
or when applying code comments!

Indicate that character parameters are restricted to only 8
characters.

Choice of the level of fontification (uniqe-commands and
complete-commands as second level fontification).

Emphasise better implied (colon) loops n,(1:6),(2:12:2) => n,1,2 $
n,2,4 $... (little used, I know, but any ideas going beyond the
colon?).  *REPEATE command might be interesting

Code line restriction of 640 characters is not taken care of.
Block level restriction of 20 levels of nested *DO loops (except
with /INPUT and *USE)
Block level restriction of 10 levels of nested *IF blocks
Macro level restriction: 20 macros